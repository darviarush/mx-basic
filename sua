#!/usr/bin/env perl

# su-a ‚Äî –≥–∏–±–∫–æ–µ —Ç–µ–ª–æ, —Ç–∞–∫ –∑–≤–∞–ª–∏ –≤ –î—Ä–µ–≤–Ω–µ–º –®—É–º–µ—Ä–µ –∫–æ—à–µ–∫

use common::sense;
use open qw/:std :utf8/;

use Carp;
$SIG{__DIE__} = sub { die($_[0] =~ /\n\z/? @_: Carp::confess(@_)) }

use Term::ReadLine;
	
my $kon = Term::ReadLine->new('SU-A');

my $prompt = "ìÇÄ ";
utf8::encode($prompt);
my $OUT = $kon->OUT || \*STDOUT;
while ( defined (my $line = $kon->readline($prompt)) ) {
	utf8::decode($line) if !utf8::is_utf8($line);
	
	my $file = Sua->new(code=>$line, file=>"–∫–æ–Ω—Å–æ–ª—å", to=>"$ENV{HOME}/.cache/su-a/$$\$");
	$file->compile;
	$file->;
	
	
	my ($prev, $err) = compile($line, "–∫–æ–Ω—Å–æ–ª—å", "$ENV{HOME}/.cache/su-a/$$\$");
	$ok &&= ;
	$kon->addhistory($line) if $ok;
}



# –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã: op => {prio, mtime}
my %op;



# –§–∞–π–ª –∏–ª–∏ —É—á–∞—Å—Ç–æ–∫ –∫–æ–¥–∞
package Sua;

sub new {
	my $cls = shift;
	bless {
		file => undef, 		# —Ñ–∞–π–ª –∫–æ—Ç–æ—Ä—ã–π –∫–æ–º–ø–∏–ª–∏–º. –£ –∫–æ–Ω—Å–æ–ª–∏ - undef
		code => undef,		# –∫–æ–¥
		to => undef,		# –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤ –∫–æ—Ç–æ—Ä—É—é –∫–æ–º–ø–∏–ª–∏–º
		@_
	}, ref $cls || $cls;
}

sub compile {
	my ($self) = @_;
	
	$self->{prev} = 0;
	
	my $s = $self->{code} //= $self->rd;
	
	my @A;
	
	# –ª–µ–∫—Å–∏–∫–∞
	while($code =~ m{
		(?<dec> \d [\d_]* (\.\d [\d_]*)?) |
		(?<str> "(\\\\|\\"|[^\n])*") |
		
		(?<space> [\ \t]+) |
		(?<newline> \n)
	}gxn) {
		$self->error("–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –ª–µ–∫—Å–µ–º–∞: `".substr($s, $self->{prev}, length($`))."`") if $self->{prev} != length($`);
		$self->{prev} = length($`) + length($&);
		
		if(exists $+{dec}) {
			my $s = $+{dec};
			$s =~ s/_//g;
			push @A, $s;
		}
	}
	
	$self->error("–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –ª–µ–∫—Å–µ–º–∞: `".substr($s, $self->{prev})."`") if $self->{prev} != length($s);
	
	$self->wr(\@A);

	return 0;
}

# —Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
sub rd {
	my ($self) = @_;
	open my $f, "<:utf8", $self->{file} or $self->error("not open $self->{file}: $!");
	read $f, my $buf, -s $f;
	close $f;
	return $buf;
}

# –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
sub wr {
	my ($self) = @_;
	open my $f, ">:utf8", $self->path2 or $self->error("not write $self->{path2}: $!");
	read $f, my $buf, -s $f;
	close $f;
	return $buf;
}

# –ø—É—Ç—å —Å–∫–æ–º–ø–∏–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
sub path2 {
	my ($self) = @_;
	$self->{path2} //= do {
		my $f = $self->{file} // "kon\$";
		$f =~ s!^.*([^/]*$)!$1!s;
		my $path = "$self->{to}/$f";
		
	}
}

# –æ—à–∏–±–∫–∞
sub error {
	my ($self, $s) = @_;
	die "$self->{file}:$self->{line}: $s\n";
}

1;