#!/usr/bin/env perl

# su-a ‚Äî –≥–∏–±–∫–æ–µ —Ç–µ–ª–æ, —Ç–∞–∫ –∑–≤–∞–ª–∏ –≤ –î—Ä–µ–≤–Ω–µ–º –®—É–º–µ—Ä–µ –∫–æ—à–µ–∫

use common::sense;
use open qw/:std :utf8/;

use Term::ReadLine;
use Term::ANSIColor qw/colored RESET/;
use Carp;
$SIG{__DIE__} = sub { die($_[0] =~ /\n\z/? @_: Carp::confess(@_)) };
 

my $kon = Term::ReadLine::Gnu->new('SU-A');

my $sua = Sua::Ed->new;

my $MARKER = "üêà";
my $prompt = RESET . colored($MARKER, "cyan");


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ / https://tiswww.cwru.edu/php/chet/readline/readline.html
while ( defined (my $line = $kon->readline($prompt)) ) {

	next if $line =~ /^\s*$/;
	
	$sua->make($line);
}


# –ö–æ–º–∞–Ω–¥–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
package Sua::Ed;

use Term::ANSIColor qw/colored/;

sub new {
	my $cls = shift;
	bless {
		INC => [".", "$::ENV{HOME}/.local/lib/sua"], 		# –ø—É—Ç–∏ —Å –∏—Å—Ö–æ–¥–Ω–∏–∫–∞–º–∏
		open => undef,										# –æ—Ç–∫—Ä—ã—Ç—ã–π –æ–ø–µ—Ä–∞—Ç–æ—Ä
		@_
	}, ref $cls || $cls;
}

# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–∫—É
sub make {
	my ($self, $line) = @_;
	
	my $rex = qr//;
	
	if($line =~ /^\d/) {	# —Å—Ç—Ä–æ–∫–∞
		print("–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –∫–æ–º–∞–Ω–¥–æ–π ", colored("o", "red bold"), colored("pen", "blue bold"), " ¬´–æ–ø–µ—Ä–∞—Ç–æ—Ä¬ª ¬´–∫–ª–∞—Å—Å¬ª\n"), return if !$self->{open};
		
	}
	elsif($line =~ /^\s*(o|open)\s+/) {
		
	}
	elsif($line =~ /^\s*(n|new)\s+(\S+)\s*$/) {
		my $x = $2;
		if($x =~ /^([a-z_]\w+)/)
		my $path = "src/";
		print "" if -e $path;
		open my $f, "<:utf8" or do { print "\n" };
	}
	elsif($line =~ /^\s*(l|list)\s+/) {
		
	}
	elsif($line =~ /^\s*(r|run)\s+/) {
		
	}
	elsif($line =~ /^\s*(b|rebase)\s+/) {
		
	}
	elsif($line =~ /^\s*(h|help|m|man)\s*$/) {
		print "
	${\colored($MARKER, 'green')}new swap¬§¬§ ‚Äî —Å–æ–∑–¥–∞—Ç—å –º–µ—Ç–æ–¥
	${\colored($MARKER, 'white')}open swap¬§¬§ ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –º–µ—Ç–æ–¥
	${\colored($MARKER, 'magenta')}open [-]% ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä
	${\colored($MARKER, 'green')}new [-]%4 ‚Äî —Å–æ–∑–¥–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º 4
	${\colored($MARKER, 'yellow')}open % ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
	
	${\colored($MARKER, 'yellow')}inherit % from # ‚Äî –Ω–∞—Å–ª–µ–¥–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å % –æ—Ç #

	${\colored($MARKER, 'blue bold')}list [1][-10] ‚Äî —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫
	${\colored($MARKER, 'green')}10 ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É
";
	}
	else {
		print colored("?", "red"), "\n";
	}
}

# –ö–æ–º–ø–∏–ª–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –∏–ª–∏ —É—á–∞—Å—Ç–æ–∫ –∫–æ–¥–∞
package Sua::Compile;

use Term::ANSIColor qw/colored/;

sub new {
	my $cls = shift;
	bless {
		ed => undef,		# —Ä–µ–¥–∞–∫—Ç–æ—Ä
		file => undef, 		# —Ñ–∞–π–ª –∫–æ—Ç–æ—Ä—ã–π –∫–æ–º–ø–∏–ª–∏–º. –£ –∫–æ–Ω—Å–æ–ª–∏ - undef
		code => undef,		# –∫–æ–¥
		to => undef,		# –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –≤ –∫–æ—Ç–æ—Ä—É—é –∫–æ–º–ø–∏–ª–∏–º
		@_
	}, ref $cls || $cls;
}

sub compile {
	my ($self) = @_;
	
	$self->{prev} = 0;
	
	my $s = $self->{code} //= $self->rd;
	
	my @A;
	
	# –ª–µ–∫—Å–∏–∫–∞
	while($s =~ m{
		(?<dec> \d [\d_]* (\.\d [\d_]*)?) |
		(?<str> "(\\\\|\\"|[^\n])*") |
		
		(?<space> [\ \t]+) |
		(?<newline> \n)
	}gxn) {
		$self->error("–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –ª–µ–∫—Å–µ–º–∞: `".substr($s, $self->{prev}, length($`))."`") if $self->{prev} != length($`);
		$self->{prev} = length($`) + length($&);
		
		if(exists $+{dec}) {
			my $s = $+{dec};
			$s =~ s/_//g;
			push @A, $s;
		}
	}
	
	$self->error("–Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –ª–µ–∫—Å–µ–º–∞: `".substr($s, $self->{prev})."`") if $self->{prev} != length($s);
	
	$self->wr(\@A);

	return 0;
}

# —Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
sub rd {
	my ($self) = @_;
	open my $f, "<:utf8", $self->{file} or $self->error("not open $self->{file}: $!");
	read $f, my $buf, -s $f;
	close $f;
	return $buf;
}

# –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª
sub wr {
	my ($self) = @_;
	open my $f, ">:utf8", $self->path2 or $self->error("not write $self->{path2}: $!");
	read $f, my $buf, -s $f;
	close $f;
	return $buf;
}

# –ø—É—Ç—å —Å–∫–æ–º–ø–∏–ª–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
sub path2 {
	my ($self) = @_;
	$self->{path2} //= do {
		my $f = $self->{file} // "kon\$";
		$f =~ s!^.*([^/]*$)!$1!s;
		my $path = "$self->{to}/$f";
		
	}
}

# –æ—à–∏–±–∫–∞
sub error {
	my ($self, $s) = @_;
	die "$self->{file}:$self->{line}: $s\n";
}


1;